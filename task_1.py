# -*- coding: utf-8 -*-
"""task_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lP4mdQEzm92Xw0fsoxEoJyXdlZq5QAiI
"""

from collections import UserDict
from datetime import datetime, date, timedelta
import pickle

class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)

class Name(Field):
    pass

class Phone(Field):
    def __init__(self, value):
        if not (isinstance(value, str) and value.isdigit() and len(value) == 10):
            raise ValueError(f"Phone number must be 10 digits, got '{value}'")
        super().__init__(value)

class Birthday(Field):
    def __init__(self, value):
        if not isinstance(value, str):
            raise ValueError("Birthday must be a string in format DD.MM.YYYY")
        try:
            datetime.strptime(value, "%d.%m.%Y")
        except ValueError:
            raise ValueError("Invalid date format. Use DD.MM.YYYY")
        super().__init__(value)

    def __str__(self):
        return self.value

class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday = None

    def __str__(self):
        phones_str = "; ".join(p.value for p in self.phones) if self.phones else "no phones"
        birthday_str = f", birthday: {self.birthday}" if self.birthday else ""
        return f"Contact name: {self.name.value}, phones: {phones_str}{birthday_str}"

    def add_phone(self, phone_num):
        phone = Phone(phone_num)
        if any(p.value == phone.value for p in self.phones):
            raise ValueError(f"Phone {phone_num} already exists for {self.name.value}")
        self.phones.append(phone)

    def remove_phone(self, phone_num):
        phone = self.find_phone(phone_num)
        if phone:
            self.phones.remove(phone)
            return f"Phone {phone_num} removed successfully"
        else:
            raise ValueError(f"Phone {phone_num} not found in record {self.name.value}")

    def edit_phone(self, old_phone, new_phone):
        phone = self.find_phone(old_phone)
        if not phone:
            raise ValueError(f"Phone {old_phone} not found in record {self.name.value}")
        Phone(new_phone)
        if any(p.value == new_phone for p in self.phones):
            raise ValueError(f"Phone {new_phone} already exists for {self.name.value}")
        phone.value = new_phone
        return f"Phone {old_phone} changed to {new_phone}"

    def find_phone(self, phone_num):
        for phone in self.phones:
            if phone.value == phone_num:
                return phone
        return None

    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)

class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def __str__(self):
        if self.data:
            return "\n".join(str(record) for record in self.data.values())
        else:
            return "No contacts found in the Address Book"

    @staticmethod
    def date_to_string(date_obj):
        return date_obj.strftime("%Y.%m.%d")

    @staticmethod
    def find_next_weekday(start_date, weekday):
        days_ahead = weekday - start_date.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        return start_date + timedelta(days=days_ahead)

    @staticmethod
    def adjust_for_weekend(birthday_date):
        if birthday_date.weekday() >= 5:
            return AddressBook.find_next_weekday(birthday_date, 0)
        return birthday_date

    def get_upcoming_birthdays(self, days=7):
        upcoming_birthdays = []
        today = date.today()

        for record in self.data.values():
            if not record.birthday:
                continue
            try:
                bdate = datetime.strptime(record.birthday.value, "%d.%m.%Y").date()
            except ValueError:
                continue

            birthday_this_year = bdate.replace(year=today.year)
            if birthday_this_year < today:
                birthday_this_year = birthday_this_year.replace(year=today.year + 1)

            days_until_birthday = (birthday_this_year - today).days

            if 0 <= days_until_birthday <= days:
                congratulation_day = AddressBook.adjust_for_weekend(birthday_this_year)
                congratulation_date_str = AddressBook.date_to_string(congratulation_day)
                upcoming_birthdays.append({
                    "name": record.name.value,
                    "congratulation_date": congratulation_date_str
                })

        return upcoming_birthdays


def save_data(book, filename="addressbook.pkl"):
    with open(filename, "wb") as f:
        pickle.dump(book, f)


def load_data(filename="addressbook.pkl"):
    try:
        with open(filename, "rb") as f:
            return pickle.load(f)
    except FileNotFoundError:
        return AddressBook()  # якщо файл не знайдено — створюється нова книга


def parse_input(user_input):
    if not user_input or not user_input.strip():
        return "", []
    parts = user_input.strip().split()
    return parts[0].lower(), parts[1:]


def input_error(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError as e:
            return f"Error: {e}"
        except KeyError:
            return "Error: Contact not found."
        except IndexError:
            return "Error: Missing argument."
    return inner

@input_error
def add_contact(args, book: AddressBook):
    if len(args) < 1:
        raise ValueError("Usage: add <name> [phone]")
    name = args[0]
    phone = args[1] if len(args) > 1 else None

    record = book.find(name)
    if record is None:
        record = Record(name)
        book.add_record(record)
        created = True
    else:
        created = False

    if phone:
        record.add_phone(phone)

    return "Contact added." if created else "Contact updated."

@input_error
def change_number(args, book: AddressBook):
    if len(args) < 3:
        raise ValueError("Usage: change <name> <old_number> <new_number>")
    name, old_number, new_number = args
    record = book.find(name)
    if not record:
        raise KeyError
    result = record.edit_phone(old_number, new_number)
    return result

@input_error
def show_phone(args, book: AddressBook):
    if len(args) < 1:
        raise ValueError("Usage: phone <name>")
    name = args[0]
    record = book.find(name)
    if not record:
        raise KeyError
    if not record.phones:
        return f"{name}: no phones"
    phones = ", ".join(p.value for p in record.phones)
    return f"{name}: {phones}"

def show_all_numbers(book: AddressBook):
    return "\n".join(str(record) for record in book.data.values()) or "No contacts found"

@input_error
def add_birthday(args, book: AddressBook):
    if len(args) < 2:
        raise ValueError("Usage: add-birthday <name> <DD.MM.YYYY>")
    name, birthday = args
    record = book.find(name)
    if not record:
        record = Record(name)
        book.add_record(record)
    record.add_birthday(birthday)
    return f"Birthday added for {name}: {birthday}"

@input_error
def show_birthday(args, book: AddressBook):
    if len(args) < 1:
        raise ValueError("Usage: show-birthday <name>")
    name = args[0]
    record = book.find(name)
    if not record:
        raise KeyError
    if record.birthday:
        return f"{name}'s birthday: {record.birthday.value}"
    return f"No birthday found for {name}"

@input_error
def birthdays(args, book: AddressBook):
    days = 7
    if args:
        try:
            days = int(args[0])
        except ValueError:
            raise ValueError("Days must be an integer")
    upcoming = book.get_upcoming_birthdays(days)
    if not upcoming:
        return "No upcoming birthdays."
    return "\n".join(f"{u['name']}: {u['congratulation_date']}" for u in upcoming)


def main():
    book = load_data()
    print("Welcome to the assistant bot!")
    while True:
        user_input = input("Enter a command: ")
        command, args = parse_input(user_input)

        if not command:
            continue

        if command in ["close", "exit"]:
            save_data(book)
            print("Good bye! Your data has been saved.")
            break
        elif command == "hello":
            print("How can I help you?")
        elif command == "add":
            print(add_contact(args, book))
        elif command == "change":
            print(change_number(args, book))
        elif command == "phone":
            print(show_phone(args, book))
        elif command == "all":
            print(show_all_numbers(book))
        elif command == "add-birthday":
            print(add_birthday(args, book))
        elif command == "show-birthday":
            print(show_birthday(args, book))
        elif command == "birthdays":
            print(birthdays(args, book))
        else:
            print("Invalid command.")


if __name__ == '__main__':
    main()